import pytest

from utils.encode_instruction import encode_instruction


@pytest.mark.parametrize(
    "instruction, expected_output",
    [
        ("addi x8, x9, -12", 0xFF448413),
        ("addi x8, x9, -12 # Comment test", 0xFF448413),
        ("addi x7, x0, 244", 0x0F400393),
        ("addi x7, x0, 244 #", 0x0F400393),
        ("sw x2, x3, 40", 0x0221A423),
        ("sw x2, x3, 40 ###########", 0x0221A423),
        ("sw x2, x3, 0x28", 0x0221A423),
        ("sw x2, x3, 0x28 ##### Hi", 0x0221A423),
        ("sw x2, x3, 0b101000", 0x0221A423),
        ("sw x2, x3, 0b101000 Hi", ValueError),
        ("sw x2, 40(x3)", 0x0221A423),
        ("sw x2, 40(x3) 4##", ValueError),
        ("sw x2, 0x28(x3)", 0x0221A423),
        ("sw x2, 0x28(x3) ### OK", 0x0221A423),
        ("sw x2, 0b101000(x3)", 0x0221A423),
        ("sw x2, 0b101000(x3) ##OK", 0x0221A423),
        ("lui, x5, 65535", 0x0FFFF2B7),
        ("lui, x5, 0xFFFF", 0x0FFFF2B7),
        ("lui, x5, 0b1111111111111111", 0x0FFFF2B7),
        ("bne x1, x2, -50", 0xFC2097E3),
        ("bne x1, x2, 0xFFFFFFCE", 0xFC2097E3),
        ("bne x1, x2, 0b111111111111111111111111111111111111111111001110", 0xFC2097E3),
        ("jal x1, -500", 0xE0DFF0EF),
        ("jal x1, 0XFFFFFE0C", 0xE0DFF0EF),
        ("jal x1, 0B111111111111111111111111111111111111111000001100", 0xE0DFF0EF),
        ("add x8, x9, x10", 0x00A48433),
        ("sub x1, x2, x13", 0x40D100B3),
        ("and x4, x11, x13", 0x00D5F233),
        ("slti x8, x9, 12", 0x00C4A413),
        ("xori x8, x9, 12", 0x00C4C413),
        ("sb x3, x2, -241", 0xF03107A3),
        ("sb x3, -241(x2)", 0xF03107A3),
        ("sw x4, x3, 124", 0x0641AE23),
        ("sw x4, 124(x3)", 0x0641AE23),
        ("sh x9, x5, 0", 0x00929023),
        ("sh x9, 0(x5)", 0x00929023),
        ("lw x3, 0(x2)", 0x00012183),
        ("lw x3, x2, 0", 0x00012183),
        ("lh x21, x7, 76", 0x04C39A83),
        ("lh x21, x7, 0x4c", 0x04C39A83),
        ("lh x21, x7, 0b1001100", 0x04C39A83),
        ("lh x21, 76(x7)", 0x04C39A83),
        ("lh x21, 0x4c(x7)", 0x04C39A83),
        ("lh x21, 0b1001100(x7)", 0x04C39A83),
        ("addi x0, x0, 0", 0x00000013),
        ("addi x0, x0, 0 # oi", 0x00000013),
        ("nop", 0x00000013),
        ("nop #hi", 0x00000013),
        ("addi x4, x0, 35", 0x02300213),
        ("li x4, 35", 0x02300213),
        ("li x22, -6", 0xFFA00B13),
        ("mv ra, sp", 0x00010093),
        ("mv a0 a7", 0x00088513),
        ("not x10, x11", 0xFFF5C513),
        ("not zero ra", 0xFFF0C013),
        ("neg x7, x23", 0x417003B3),
        ("neg x31, x30", 0x41E00FB3),
        ("beqz x10, 4", 0x00050263),
        ("beq x10, x0, 4", 0x00050263),
        ("beqz x15, 12", 0x00078663),
        ("beq x15, x0, 12", 0x00078663),
        ("bnez x22 12", 0x000B1663),
        ("bne x22 x0 12", 0x000B1663),
        ("bne x22 x0 -12", 0xFE0B1AE3),
        ("bnez x22 -12", 0xFE0B1AE3),
        ("jal x0 16", 0x0100006F),
        ("j 16", 0x0100006F),
        ("j -16", 0xFF1FF06F),
        ("jr ra", 0x00008067),
        ("jr x7", 0x00038067),
        ("ret", 0x00008067),
    ],
)
def test_encode_instruction(instruction, expected_output):
    if expected_output == ValueError:
        pytest.raises(ValueError)
    else:
        assert encode_instruction(instruction) == expected_output
